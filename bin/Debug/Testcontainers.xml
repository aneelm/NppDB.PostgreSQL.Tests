<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Testcontainers</name>
    </assembly>
    <members>
        <member name="T:DotNet.Testcontainers.Builders.AbstractBuilder`4">
            <summary>
            An abstract fluent Docker resource builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TResourceEntity">The resource entity.</typeparam>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
            <typeparam name="TConfigurationEntity">The configuration entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.#ctor(`3)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.AbstractBuilder`4" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithDockerEndpoint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithDockerEndpoint(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithDockerEndpoint(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithCleanUp(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithLabel(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithLabel(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithCreateParameterModifier(System.Action{`2})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithResourceReaperSessionId(System.Guid)">
            <summary>
            Sets the Resource Reaper session id.
            </summary>
            <param name="resourceReaperSessionId">The <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> session id.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel(&quot;custom.builder&quot;, bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{`2})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Merge(`3,`3)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.Base64Provider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Base64Provider.#ctor(System.Text.Json.JsonDocument,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.Base64Provider" /> class.
            </summary>
            <param name="jsonDocument">The JSON document that holds the Docker config auths node.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Base64Provider.#ctor(System.Text.Json.JsonElement,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.Base64Provider" /> class.
            </summary>
            <param name="jsonElement">The JSON element that holds the Docker config auths node.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.Base64Provider.HasDockerRegistryKey">
            <summary>
            Gets a predicate that determines whether or not a <see cref="T:System.Text.Json.JsonProperty" /> contains a Docker registry key.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Base64Provider.IsApplicable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Base64Provider.GetAuthConfig(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(``0,``0)">
            <summary>
            Returns the changed configuration object. If there is no change, the previous configuration object is returned.
            </summary>
            <param name="oldValue">The old configuration object.</param>
            <param name="newValue">The new configuration object.</param>
            <typeparam name="T">Any class.</typeparam>
            <returns>Changed configuration object. If there is no change, the previous configuration object.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines all existing and new configuration changes. If there are no changes, the previous configurations are returned.
            </summary>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Combines all existing and new configuration changes while preserving the order of insertion.
            If there are no changes, the previous configurations are returned.
            </summary>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Combines all existing and new configuration changes. If there are no changes, the previous configurations are returned.
            </summary>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.CommonDirectoryPath">
            <summary>
            Resolves common directory paths.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.CommonDirectoryPath" /> struct.
            </summary>
            <param name="directoryPath">The directory path.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.CommonDirectoryPath.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetBinDirectory">
            <summary>
            Resolves the first bin directory upwards the directory tree.
            </summary>
            <returns>The first bin directory upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the bin directory was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetGitDirectory(System.String)">
            <summary>
            Resolves the first Git directory upwards the directory tree.
            </summary>
            <remarks>
            Start node is the caller file path directory. End node is the root directory.
            </remarks>
            <param name="filePath">The caller file path.</param>
            <returns>The first Git directory upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the Git directory was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetSolutionDirectory(System.String)">
            <summary>
            Resolves the first Visual Studio solution file upwards the directory tree.
            </summary>
            <remarks>
            Start node is the caller file path directory. End node is the root directory.
            </remarks>
            <param name="filePath">The caller file path.</param>
            <returns>The first Visual Studio solution file upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the Visual Studio solution file was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetProjectDirectory(System.String)">
            <summary>
            Resolves the first CSharp project file upwards the directory tree.
            </summary>
            <remarks>
            Start node is the caller file path directory. End node is the root directory.
            </remarks>
            <param name="filePath">The caller file path.</param>
            <returns>The first CSharp project file upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the CSharp project file was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetCallerFileDirectory(System.String)">
            <summary>
            Resolves the caller file path directory.
            </summary>
            <param name="filePath">The caller file path.</param>
            <returns>The caller file path directory.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.Consume">
            <summary>
            Collection of pre-configured output consumers.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Consume.DoNotConsumeStdoutAndStderr">
            <summary>
            Does not consume the output of the Testcontainer.
            </summary>
            <returns>A output consumer.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Consume.RedirectStdoutAndStderrToConsole">
            <summary>
            Redirects the output of the Testcontainer to <see cref="T:System.Console" />.
            </summary>
            <returns>A output consumer.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Consume.RedirectStdoutAndStderrToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Redirects the output of the Testcontainer to the given streams..
            </summary>
            <param name="stdout">Receives Stdout.</param>
            <param name="stderr">Receives Stderr.</param>
            <returns>A output consumer.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder">
            <summary>
            A fluent Docker container builder.
            </summary>
            <remarks>
            The container builder configuration requires at least the <see cref="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImage(System.String)" /> configuration.
            </remarks>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new ContainerBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .WithImagePullPolicy(PullPolicy.Missing)
                .WithOutputConsumer(Consume.DoNotConsumeStdoutAndStderr())
                .WithWaitStrategy(Wait.ForUnixContainer())
                .WithStartupCallback((_, ct) => Task.CompletedTask)
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder.DockerResourceConfiguration">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Init">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Clone(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Merge(DotNet.Testcontainers.Configurations.IContainerConfiguration,DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder`3">
            <summary>
            An abstract fluent Docker container builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TContainerEntity">The resource entity.</typeparam>
            <typeparam name="TConfigurationEntity">The configuration entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Containers.IContainer)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Networks.INetwork)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImage(DotNet.Testcontainers.Images.IImage)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImagePullPolicy(System.Func{Docker.DotNet.Models.ImagesListResponse,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithHostname(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithMacAddress(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithWorkingDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithEntrypoint(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithCommand(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithEnvironment(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithEnvironment(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithExposedPort(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithExposedPort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(DotNet.Testcontainers.Configurations.IResourceMapping)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.Byte[],System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.String,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.IO.DirectoryInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithMount(DotNet.Testcontainers.Configurations.IMount)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithBindMount(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithBindMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithTmpfsMount(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithTmpfsMount(System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetwork(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetwork(DotNet.Testcontainers.Networks.INetwork)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetworkAliases(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetworkAliases(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithExtraHost(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithAutoRemove(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPrivileged(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithOutputConsumer(DotNet.Testcontainers.Configurations.IOutputConsumer)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithWaitStrategy(DotNet.Testcontainers.Configurations.IWaitForContainerOS)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithStartupCallback(System.Func{DotNet.Testcontainers.Containers.IContainer,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.Init">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.Validate">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.Clone(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.#ctor(DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.Merge(DotNet.Testcontainers.Configurations.INetworkConfiguration,DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork">
            <inheritdoc cref="T:DotNet.Testcontainers.Networks.INetwork" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork.Name">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingNetwork.DockerNetwork.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.#ctor(DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.Merge(DotNet.Testcontainers.Configurations.IVolumeConfiguration,DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.DockerVolume">
            <inheritdoc cref="T:DotNet.Testcontainers.Volumes.IVolume" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.DockerVolume.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.DockerVolume" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.DockerVolume.Name">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.DockerVolume.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.FromExistingVolume.DockerVolume.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.CredsHelperProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsHelperProvider.#ctor(System.Text.Json.JsonDocument,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.CredsHelperProvider" /> class.
            </summary>
            <param name="jsonDocument">The JSON document that holds the Docker config credsHelper node.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsHelperProvider.#ctor(System.Text.Json.JsonElement,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.CredsHelperProvider" /> class.
            </summary>
            <param name="jsonElement">The JSON element that holds the Docker config credsHelper node.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsHelperProvider.IsApplicable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsHelperProvider.GetAuthConfig(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.CredsStoreProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsStoreProvider.#ctor(System.Text.Json.JsonDocument,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.CredsStoreProvider" /> class.
            </summary>
            <param name="jsonDocument">The JSON document that holds the Docker config credsStore node.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsStoreProvider.#ctor(System.Text.Json.JsonElement,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.CredsStoreProvider" /> class.
            </summary>
            <param name="jsonElement">The JSON element that holds the Docker config credsStore node.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsStoreProvider.IsApplicable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CredsStoreProvider.GetAuthConfig(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerHost">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerHostOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerSocketOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerCertPath">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerTls">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetDockerTlsVerify">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetRyukDisabled">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetRyukContainerPrivileged">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetRyukContainerImage">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerDesktopEndpointAuthenticationProvider.GetHubImageNamePrefix">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.DockerEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerEndpointAuthenticationProvider.IsAvailable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider" /> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider.#ctor(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider" /> class.
            </summary>
            <param name="dockerConfigFilePath">The Docker config file path.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider.#ctor(System.IO.FileInfo,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider" /> class.
            </summary>
            <param name="dockerConfigFilePath">The Docker config file path.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider.IsApplicable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerRegistryAuthenticationProvider.GetAuthConfig(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider.#ctor(DotNet.Testcontainers.Configurations.ICustomConfiguration[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider" /> class.
            </summary>
            <param name="customConfigurations">A list of custom configurations.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.EnvironmentEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IAbstractBuilder`3">
            <summary>
            A fluent Docker resource builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TResourceEntity">The resource entity.</typeparam>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithDockerEndpoint(System.String)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="endpoint">The Docker API endpoint.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithDockerEndpoint(System.Uri)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="endpoint">The Docker API endpoint.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithDockerEndpoint(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithCleanUp(System.Boolean)">
            <summary>
            Cleans up the Docker resource after the tests are finished.
            </summary>
            <param name="cleanUp">Determines whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> removes the Docker resource after the tests are finished or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithLabel(System.String,System.String)">
            <summary>
            Adds user-defined metadata to the Docker resource.
            </summary>
            <param name="name">The label name.</param>
            <param name="value">The label value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithLabel(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds user-defined metadata to the Docker resource.
            </summary>
            <param name="labels">A dictionary of environment variables.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithCreateParameterModifier(System.Action{`2})">
            <summary>
            Allows low level modifications of the Docker.DotNet entity after the builder configuration has been applied. Multiple low level modifications will be executed in order of insertion.
            </summary>
            <remarks>
            This API is intended for special use cases only. We do not recommend using it and cannot maintain backwards compatibility.
            </remarks>
            <param name="parameterModifier">The action that invokes modifying the Docker.DotNet entity instance.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.Build">
            <summary>
            Builds an instance of <typeparamref name="TResourceEntity" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <typeparamref name="TResourceEntity" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IContainerBuilder`2">
            <summary>
            A fluent Docker container builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TContainerEntity">The resource entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.DependsOn(DotNet.Testcontainers.Containers.IContainer)">
            <summary>
            Sets the dependent container to resolve and start before starting this container configuration.
            </summary>
            <param name="container">The dependent container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.DependsOn(DotNet.Testcontainers.Networks.INetwork)">
            <summary>
            Sets the dependent network to resolve and create before starting this container configuration.
            </summary>
            <param name="network">The dependent network.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <summary>
            Sets the dependent volume to resolve and create before starting this container configuration.
            </summary>
            <param name="volume">The dependent volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Sets the dependent volume to resolve and create before starting this container configuration.
            </summary>
            <param name="volume">The dependent volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithImage(System.String)">
            <summary>
            Sets an image for which to create the container.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithImage(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Sets an image for which to create the container.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithImagePullPolicy(System.Func{Docker.DotNet.Models.ImagesListResponse,System.Boolean})">
            <summary>
            Sets the image pull policy.
            </summary>
            <param name="imagePullPolicy">The image pull policy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithHostname(System.String)">
            <summary>
            Sets the hostname.
            </summary>
            <param name="hostname">The hostname.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithMacAddress(System.String)">
            <summary>
            Sets the MAC address.
            </summary>
            <param name="macAddress">The MAC address.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithWorkingDirectory(System.String)">
            <summary>
            Sets the working directory.
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithEntrypoint(System.String[])">
            <summary>
            Overrides the container's entrypoint executable.
            </summary>
            <param name="entrypoint">The entrypoint executable.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithCommand(System.String[])">
            <summary>
            Overrides the container's command arguments.
            </summary>
            <param name="command">A list of commands, "executable", "param1", "param2" or "param1", "param2".</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithEnvironment(System.String,System.String)">
            <summary>
            Sets the environment variable.
            </summary>
            <param name="name">The environment variable name.</param>
            <param name="value">The environment variable value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithEnvironment(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets the environment variable.
            </summary>
            <param name="environments">A dictionary of environment variables.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithExposedPort(System.Int32)">
            <summary>
            Exposes the port without publishing it to the host system's interfaces.
            </summary>
            <param name="port">The port.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithExposedPort(System.String)">
            <summary>
            Exposes the port without publishing it to the host system's interfaces.
            </summary>
            <param name="port">The port.</param>
            <remarks>Append /tcp|udp|sctp to <paramref name="port" /> to change the protocol e.g. "53/udp".</remarks>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithPortBinding(System.Int32,System.Boolean)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="port">The container port.</param>
            <param name="assignRandomHostPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithPortBinding(System.Int32,System.Int32)">
            <summary>
            Binds the container port to a specific host port.
            </summary>
            <param name="hostPort">The host port.</param>
            <param name="containerPort">The container port.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithPortBinding(System.String,System.Boolean)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="port">The container port.</param>
            <param name="assignRandomHostPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <remarks>Append /tcp|udp|sctp to <paramref name="port" /> to change the protocol e.g. "53/udp".</remarks>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithPortBinding(System.String,System.String)">
            <summary>
            Binds the container port to a specific host port.
            </summary>
            <param name="hostPort">The host port.</param>
            <param name="containerPort">The container port.</param>
            <remarks>Append /tcp|udp|sctp to <paramref name="containerPort" /> to change the protocol e.g. "53/udp".</remarks>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithResourceMapping(DotNet.Testcontainers.Configurations.IResourceMapping)">
            <summary>
            Copies the byte array content of the resource mapping to the created container before it starts.
            </summary>
            <param name="resourceMapping">The resource mapping.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithResourceMapping(System.Byte[],System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies the byte array content to the created container before it starts.
            </summary>
            <param name="resourceContent">The byte array content of the resource mapping.</param>
            <param name="filePath">The target file path to copy the file to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithResourceMapping(System.String,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source directory or file to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithResourceMapping(System.IO.DirectoryInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithResourceMapping(System.IO.FileInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host file to the container before it starts.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target file path to copy the file to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithMount(DotNet.Testcontainers.Configurations.IMount)">
            <summary>
            Assigns the mount configuration to manage data in the container.
            </summary>
            <param name="mount">The mount configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithBindMount(System.String,System.String)">
            <summary>
            Binds and mounts the specified host machine volume into the container.
            </summary>
            <param name="source">An absolute path or a name value within the host machine.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithBindMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Binds and mounts the specified host machine volume into the container.
            </summary>
            <param name="source">An absolute path or a name value within the host machine.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithVolumeMount(System.String,System.String)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="source">The name of the managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithVolumeMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="source">The name of the managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="volume">The managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="volume">The managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithTmpfsMount(System.String)">
            <summary>
            Mounts the specified tmpfs (temporary file system) volume into the container.
            </summary>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithTmpfsMount(System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified tmpfs (temporary file system) volume into the container.
            </summary>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithNetwork(System.String)">
            <summary>
            Assigns the specified network to the container.
            </summary>
            <param name="name">The network's name to connect to.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithNetwork(DotNet.Testcontainers.Networks.INetwork)">
            <summary>
            Assigns the specified network to the container.
            </summary>
            <param name="network">The network to connect container to.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithNetworkAliases(System.String[])">
            <summary>
            Assigns the specified network-scoped aliases to the container.
            </summary>
            <param name="networkAliases">The network-scoped aliases.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithNetworkAliases(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Assigns the specified network-scoped aliases to the container.
            </summary>
            <param name="networkAliases">A list of network-scoped aliases.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithExtraHost(System.String,System.String)">
            <summary>
            Adds the extra host to "/etc/hosts" respectively "%WINDIR%\\system32\\drivers\\etc\\hosts".
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="ipAddress">The IP address.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithAutoRemove(System.Boolean)">
            <summary>
            Cleans up the container after it exits.
            </summary>
            <remarks>
            It is recommended to rely on the Resource Reaper to clean up resources: https://dotnet.testcontainers.org/api/resource-reaper/.
            </remarks>
            <param name="autoRemove">Determines whether Docker removes the container after it exits or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithPrivileged(System.Boolean)">
            <summary>
            Sets the privileged flag.
            </summary>
            <param name="privileged">Determines whether the privileged flag is set or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithOutputConsumer(DotNet.Testcontainers.Configurations.IOutputConsumer)">
            <summary>
            Sets the output consumer to capture the container's stdout and stderr messages.
            </summary>
            <param name="outputConsumer">The output consumer.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithWaitStrategy(DotNet.Testcontainers.Configurations.IWaitForContainerOS)">
            <summary>
            Sets the wait strategies to indicate readiness of the container.
            </summary>
            <param name="waitStrategy">The wait strategy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`2.WithStartupCallback(System.Func{DotNet.Testcontainers.Containers.IContainer,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets a startup callback to invoke after the container start.
            </summary>
            <remarks>
            The callback method is invoked after the container start, but before the wait strategies.
            </remarks>
            <param name="startupCallback">The callback method to invoke.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider">
            <summary>
            A Docker endpoint authentication provider.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider.IsApplicable">
            <summary>
            Is true when the authentication provider contains Docker endpoint credentials, otherwise false.
            </summary>
            <returns>True when the authentication provider contains Docker endpoint credentials, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider.IsAvailable">
            <summary>
            Is true when a connection to the Docker endpoint can be established, otherwise false.
            </summary>
            <returns>True when a connection to the Docker endpoint can be established, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IDockerEndpointAuthenticationProvider.GetAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
            <returns>The Docker endpoint authentication configuration or null if no configuration matches the hostname.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider">
            <summary>
            A Docker registry authentication provider.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider.IsApplicable(System.String)">
            <summary>
            Is true when the authentication provider contains any Docker registry credentials, otherwise false.
            </summary>
            <param name="hostname">The Docker hostname.</param>
            <returns>True when the authentication provider contains any Docker registry credentials, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider.GetAuthConfig(System.String)">
            <summary>
            Gets the Docker registry authentication configuration.
            </summary>
            <param name="hostname">The Docker hostname.</param>
            <returns>The Docker registry authentication configuration or null if no configuration matches the hostname.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1">
            <summary>
            A fluent Docker image builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithName(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDockerfile(System.String)">
            <summary>
            Sets the Dockerfile.
            </summary>
            <param name="dockerfile">An absolute path or a name value within the Docker build context.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDockerfileDirectory(System.String)">
            <summary>
            Sets the Dockerfile directory.
            </summary>
            <param name="dockerfileDirectory">An absolute path or a name value to the Docker build context.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDockerfileDirectory(DotNet.Testcontainers.Builders.CommonDirectoryPath,System.String)">
            <summary>
            Sets the Dockerfile directory.
            </summary>
            <param name="commonDirectoryPath">A common directory path that contains the Dockerfile directory.</param>
            <param name="dockerfileDirectory">A relative path or a name value to the Docker build context.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithImageBuildPolicy(System.Func{Docker.DotNet.Models.ImagesListResponse,System.Boolean})">
            <summary>
            Sets the image build policy.
            </summary>
            <param name="imageBuildPolicy">The image build policy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDeleteIfExists(System.Boolean)">
            <summary>
            Removes an existing image before building it again.
            </summary>
            <param name="deleteIfExists">Determines whether Testcontainers removes an existing image or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithBuildArgument(System.String,System.String)">
            <summary>
            Sets the build argument.
            </summary>
            <param name="name">The build argument name.</param>
            <param name="value">The build argument value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder">
            <summary>
            A fluent Docker image builder.
            </summary>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new ImageFromDockerfileBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .WithDockerfile("Dockerfile")
                .WithDockerfileDirectory(Directory.GetCurrentDirectory())
                .WithName(new DockerImage("localhost/testcontainers", Guid.NewGuid().ToString("D"), string.Empty))
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.#ctor(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.DockerResourceConfiguration">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithName(DotNet.Testcontainers.Images.IImage)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDockerfile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDockerfileDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDockerfileDirectory(DotNet.Testcontainers.Builders.CommonDirectoryPath,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithImageBuildPolicy(System.Func{Docker.DotNet.Models.ImagesListResponse,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDeleteIfExists(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithBuildArgument(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Init">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.ImageBuildParameters})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Merge(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration,DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.INetworkBuilder`1">
            <summary>
            A fluent Docker network builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.INetworkBuilder`1.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.INetworkBuilder`1.WithDriver(DotNet.Testcontainers.Configurations.NetworkDriver)">
            <summary>
            Sets the driver.
            </summary>
            <param name="driver">The driver.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.INetworkBuilder`1.WithOption(System.String,System.String)">
            <summary>
            Sets the network option.
            </summary>
            <param name="name">The network option name.</param>
            <param name="value">The network option value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IVolumeBuilder`1">
            <summary>
            A fluent Docker volume builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IVolumeBuilder`1.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider.#ctor(DotNet.Testcontainers.Configurations.ICustomConfiguration[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider" /> class.
            </summary>
            <param name="customConfigurations">A list of custom configurations.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.MTlsEndpointAuthenticationProvider.GetClientCertificate">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.NetworkBuilder">
            <summary>
            A fluent Docker network builder.
            </summary>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new NetworkBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .WithDriver(NetworkDriver.Bridge)
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.#ctor(DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.NetworkBuilder.DockerResourceConfiguration">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.WithName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.WithDriver(DotNet.Testcontainers.Configurations.NetworkDriver)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.WithOption(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Init">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Validate">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.NetworksCreateParameters})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Merge(DotNet.Testcontainers.Configurations.INetworkConfiguration,DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.NpipeEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="P:DotNet.Testcontainers.Builders.NpipeEndpointAuthenticationProvider.DockerEngine">
            <summary>
            Gets the named pipe Docker Engine endpoint.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NpipeEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NpipeEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider" /> class.
            </summary>
            <param name="socketPaths">A list of socket paths.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.DockerEngine">
            <summary>
            Gets the Unix socket Docker Engine endpoint.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.IUserIdentity">
            <summary>
            A user identity.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.IUserIdentity.GetUid">
            <summary>
            Gets the real user ID of the calling process.
            </summary>
            <returns>The real user ID of the calling process.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.Darwin">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.IUserIdentity" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.Darwin.GetUid">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.Linux">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.IUserIdentity" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.RootlessUnixEndpointAuthenticationProvider.Linux.GetUid">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider">
            <summary>
            When configuring the endpoint for a container runtime, the `DOCKER_HOST`
            environment variable is commonly used. This approach can become messy due to
            the variety of alternative container runtimes. Even though Testcontainers logs
            the container runtime that is being used, developers find it difficult to
            determine which runtime is driving the tests on their environment. If multiple
            container runtimes are present in a development environment, we prioritize
            Testcontainers Cloud if it is running.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider" /> class.
            </summary>
            <param name="lines">A list of Java properties file lines.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerHost">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerHostOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerSocketOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerCertPath">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerTls">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetDockerTlsVerify">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetRyukDisabled">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetRyukContainerPrivileged">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetRyukContainerImage">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TestcontainersEndpointAuthenticationProvider.GetHubImageNamePrefix">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.#ctor(DotNet.Testcontainers.Configurations.ICustomConfiguration[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider" /> class.
            </summary>
            <param name="customConfigurations">A list of custom configurations.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.GetCaCertificate">
            <summary>
            Gets the root certificate authority (CA).
            </summary>
            <returns>The root certificate authority (CA).</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.GetClientCertificate">
            <summary>
            Gets the client certificate.
            </summary>
            <returns>The client certificate.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.TlsEndpointAuthenticationProvider.ServerCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <inheritdoc cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback" />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.UnixEndpointAuthenticationProvider">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.IDockerRegistryAuthenticationProvider" />
        </member>
        <member name="P:DotNet.Testcontainers.Builders.UnixEndpointAuthenticationProvider.DockerEngine">
            <summary>
            Gets the Unix socket Docker Engine endpoint.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.UnixEndpointAuthenticationProvider.IsApplicable">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.UnixEndpointAuthenticationProvider.GetAuthConfig">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.VolumeBuilder">
            <summary>
            A fluent Docker volume builder.
            </summary>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new VolumeBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.#ctor(DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.VolumeBuilder.DockerResourceConfiguration">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.WithName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Init">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Validate">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.VolumesCreateParameters})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Merge(DotNet.Testcontainers.Configurations.IVolumeConfiguration,DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Builders.Wait">
            <summary>
            Container platform specific wait strategies.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Wait.ForUnixContainer">
            <summary>
            Returns the pre-configured wait strategies for Unix containers.
            </summary>
            <returns>Implementation of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" /> for Unix containers.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Wait.ForWindowsContainer">
            <summary>
            Returns the pre-configured wait strategies for Windows containers.
            </summary>
            <returns>Implementation of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" /> for Windows containers.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Clients.BaseConverter`2">
            <summary>
            Converts or maps the Testcontainers configuration to the official Docker configuration.
            </summary>
            <typeparam name="TSource">Testcontainers configuration type.</typeparam>
            <typeparam name="TTarget">Official Docker configuration type.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.BaseConverter`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Clients.BaseConverter`2" /> class.
            </summary>
            <param name="name">Name of the converter.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.BaseConverter`2.Convert(`0)">
            <summary>
            Converts or maps the Testcontainers configuration to the official Docker configuration.
            </summary>
            <param name="source">Testcontainers configuration.</param>
            <returns>Official Docker configuration.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Clients.CollectionConverter`2">
            <summary>
            Converts or maps Testcontainers collection configurations to official Docker configurations.
            </summary>
            <typeparam name="TSource">Testcontainer configuration type.</typeparam>
            <typeparam name="TTarget">Official Docker configuration type.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.CollectionConverter`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Clients.CollectionConverter`2" /> class.
            </summary>
            <param name="name">Name of the converter.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Clients.DictionaryConverter`1">
            <summary>
            Converts or maps Testcontainers dictionary configurations to official Docker configurations.
            </summary>
            <typeparam name="TTarget">Official Docker configuration type.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.DictionaryConverter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Clients.DictionaryConverter`1" /> class.
            </summary>
            <param name="name">Name of the converter.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Clients.ITestcontainersClient">
            <summary>
            This class represents a Testcontainers client.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.ITestcontainersClient.Container">
            <summary>
            Gets the Docker container operations endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.ITestcontainersClient.Image">
            <summary>
            Gets the Docker image operations endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.ITestcontainersClient.Network">
            <summary>
            Gets the Docker network operations endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.ITestcontainersClient.Volume">
            <summary>
            Gets the Docker volume operations endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.ITestcontainersClient.System">
            <summary>
            Gets the Docker system operations endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.ITestcontainersClient.IsRunningInsideDocker">
            <summary>
            Gets a value indicating whether the container is running inside another container or not.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.GetContainerExitCodeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the container exit code.
            </summary>
            <param name="id">The container id.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that gets the container exit code.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.GetContainerLogsAsync(System.String,System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the container logs.
            </summary>
            <param name="id">The container id.</param>
            <param name="since">Only logs since this time.</param>
            <param name="until">Only logs until this time.</param>
            <param name="timestampsEnabled">Determines whether every log line contains a timestamp or not.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that gets the container logs.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.InspectContainerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the container low-level information object.
            </summary>
            <param name="id">The container id.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that gets the container low-level information object.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.StartAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.StopAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been stopped.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been removed.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.AttachAsync(System.String,DotNet.Testcontainers.Configurations.IOutputConsumer,System.Threading.CancellationToken)">
            <summary>
            Attaches to the container and copies the output to the <see cref="T:DotNet.Testcontainers.Configurations.IOutputConsumer" />.
            </summary>
            <param name="id">The container id.</param>
            <param name="outputConsumer">The stdout and stderr consumer.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container's stdout and stderr has been copied to the consumer.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.ExecAsync(System.String,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes a command in the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="command">The shell command to execute.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the shell command has been executed.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.CopyAsync(System.String,DotNet.Testcontainers.Configurations.IResourceMapping,System.Threading.CancellationToken)">
            <summary>
            Copies the content of an implementation of <see cref="T:DotNet.Testcontainers.Configurations.IResourceMapping" /> to the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="resourceMapping">The resource mapping to add to the archive.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the content has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.CopyAsync(System.String,System.IO.DirectoryInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory to the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.CopyAsync(System.String,System.IO.FileInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.ReadFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a file from the container.
            </summary>
            <param name="id">The container id.</param>
            <param name="filePath">The path to the file in the container.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the file has been read.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.RunAsync(DotNet.Testcontainers.Configurations.IContainerConfiguration,System.Threading.CancellationToken)">
            <summary>
            Creates the container.
            </summary>
            <param name="configuration">The container configuration.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been created.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Clients.ITestcontainersClient.BuildAsync(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration,System.Threading.CancellationToken)">
            <summary>
            Builds a Docker image from a Dockerfile.
            </summary>
            <param name="configuration">The Dockerfile configuration.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the Docker image has been built.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Clients.TestcontainersClient">
            <inheritdoc cref="T:DotNet.Testcontainers.Clients.ITestcontainersClient" />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.#ctor(System.Guid,DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Clients.TestcontainersClient" /> class.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Clients.TestcontainersClient.Container">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Clients.TestcontainersClient.Image">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Clients.TestcontainersClient.Network">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Clients.TestcontainersClient.Volume">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Clients.TestcontainersClient.System">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Clients.TestcontainersClient.IsRunningInsideDocker">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.GetContainerExitCodeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.GetContainerLogsAsync(System.String,System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.InspectContainerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.StartAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.StopAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.AttachAsync(System.String,DotNet.Testcontainers.Configurations.IOutputConsumer,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.ExecAsync(System.String,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.CopyAsync(System.String,DotNet.Testcontainers.Configurations.IResourceMapping,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.CopyAsync(System.String,System.IO.DirectoryInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.CopyAsync(System.String,System.IO.FileInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.ReadFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.RunAsync(DotNet.Testcontainers.Configurations.IContainerConfiguration,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.BuildAsync(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Clients.TestcontainersClient.PullImageAsync(DotNet.Testcontainers.Images.IImage,System.Threading.CancellationToken)">
            <summary>
            Pulls an image from a registry.
            </summary>
            <param name="image">The image to pull.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.#ctor(System.Uri,Docker.DotNet.Credentials)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration" /> struct.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
            <param name="credentials">The Docker API authentication credentials.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.Credentials">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.Endpoint">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.GetDockerClientConfiguration(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration" /> struct.
            </summary>
            <param name="registryEndpoint">The Docker registry endpoint.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="identityToken">The identity token.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration.#ctor(System.String,System.Text.Json.JsonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration" /> struct.
            </summary>
            <param name="registryEndpoint">The Docker registry endpoint.</param>
            <param name="credential">The CredHelpers or CredsStore JSON response.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration.RegistryEndpoint">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration.Username">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration.Password">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerRegistryAuthenticationConfiguration.IdentityToken">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration">
            <summary>
            An authentication configuration to authenticate against private Docker clients.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration.Endpoint">
            <summary>
            Gets the Docker API endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration.Credentials">
            <summary>
            Gets the Docker API credentials.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration.GetDockerClientConfiguration(System.Guid)">
            <summary>
            Gets the Docker client configuration.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns>The Docker client configuration.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration">
            <summary>
            An authentication configuration to authenticate against private Docker registries.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.RegistryEndpoint">
            <summary>
            Gets the Docker registry endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.IdentityToken">
            <summary>
            Gets the identity token.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IResourceConfiguration`1">
            <summary>
            A resource configuration.
            </summary>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.SessionId">
            <summary>
            Gets the test session id.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.Labels">
            <summary>
            Gets a list of labels.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.ParameterModifiers">
            <summary>
            Gets a list of low level modifications of the Docker.DotNet entity.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IResourceConfiguration`1" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.#ctor(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyList{System.Action{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1" /> class.
            </summary>
            <param name="dockerEndpointAuthenticationConfiguration">The Docker endpoint authentication configuration.</param>
            <param name="labels">The test session id.</param>
            <param name="parameterModifiers">A list of low level modifications of the Docker.DotNet entity.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{`0},DotNet.Testcontainers.Configurations.IResourceConfiguration{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.SessionId">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.DockerEndpointAuthConfig">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.Labels">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.ParameterModifiers">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ContainerConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IContainerConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Images.IImage,System.Func{Docker.DotNet.Models.ImagesListResponse,System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,DotNet.Testcontainers.Configurations.IResourceMapping},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Containers.IContainer},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Configurations.IMount},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Networks.INetwork},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},DotNet.Testcontainers.Configurations.IOutputConsumer,System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Configurations.IWaitUntil},System.Func{DotNet.Testcontainers.Containers.IContainer,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="image">The image.</param>
            <param name="imagePullPolicy">The image pull policy.</param>
            <param name="name">The name.</param>
            <param name="hostname">The hostname.</param>
            <param name="macAddress">The MAC address.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="entrypoint">The entrypoint.</param>
            <param name="command">The command.</param>
            <param name="environments">A dictionary of environment variables.</param>
            <param name="exposedPorts">A dictionary of exposed ports.</param>
            <param name="portBindings">A dictionary of port bindings.</param>
            <param name="resourceMappings">A dictionary of resource mappings.</param>
            <param name="containers">A list of containers.</param>
            <param name="mounts">A list of mounts.</param>
            <param name="networks">A list of networks.</param>
            <param name="networkAliases">A list of network-scoped aliases.</param>
            <param name="extraHosts">A list of extra hosts.</param>
            <param name="outputConsumer">The output consumer.</param>
            <param name="waitStrategies">The wait strategies.</param>
            <param name="startupCallback">The startup callback.</param>
            <param name="autoRemove">A value indicating whether Docker removes the container after it exits or not.</param>
            <param name="privileged">A value indicating whether the privileged flag is set or not.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration,DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.AutoRemove">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Privileged">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Image">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ImagePullPolicy">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Name">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Hostname">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.MacAddress">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.WorkingDirectory">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Entrypoint">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Command">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Environments">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ExposedPorts">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.PortBindings">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ResourceMappings">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Containers">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Mounts">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Networks">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.NetworkAliases">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ExtraHosts">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.OutputConsumer">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.WaitStrategies">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.StartupCallback">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IContainerConfiguration">
            <summary>
            A container configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.AutoRemove">
            <summary>
            Gets a value indicating whether Docker removes the container after it exits or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Privileged">
            <summary>
            Gets a value indicating whether the privileged flag is set or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ImagePullPolicy">
            <summary>
            Gets the image pull policy.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Hostname">
            <summary>
            Gets the hostname.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.MacAddress">
            <summary>
            Gets the MAC address.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.WorkingDirectory">
            <summary>
            Gets the working directory.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Entrypoint">
            <summary>
            Gets the entrypoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Command">
            <summary>
            Gets the command.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Environments">
            <summary>
            Gets a dictionary of environment variables.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ExposedPorts">
            <summary>
            Gets a dictionary of exposed ports.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.PortBindings">
            <summary>
            Gets a dictionary of port bindings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ResourceMappings">
            <summary>
            Gets a dictionary of resource mappings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Containers">
            <summary>
            Gets a list of dependent containers.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Mounts">
            <summary>
            Gets a list of dependent mounts.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Networks">
            <summary>
            Gets a list of dependent networks.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.NetworkAliases">
            <summary>
            Gets a list of network-scoped aliases.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ExtraHosts">
            <summary>
            Gets a list of extra hosts.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.OutputConsumer">
            <summary>
            Gets the output consumer.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.WaitStrategies">
            <summary>
            Gets the wait strategies.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.StartupCallback">
            <summary>
            Gets the startup callback.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.EnvironmentConfiguration">
            <summary>
            Reads and maps the custom configurations from the environment variables.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.EnvironmentConfiguration" /> class.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.ICustomConfiguration" /> instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerHost">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerHostOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerSocketOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerCertPath">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerTls">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetDockerTlsVerify">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetRyukDisabled">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetRyukContainerPrivileged">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetRyukContainerImage">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.EnvironmentConfiguration.GetHubImageNamePrefix">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ICustomConfiguration">
            <summary>
            A Testcontainers custom configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerConfig">
            <summary>
            Gets the Docker config custom configuration.
            </summary>
            <returns>The Docker config custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerHost">
            <summary>
            Gets the Docker host custom configuration.
            </summary>
            <returns>The Docker host custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerHostOverride">
            <summary>
            Gets the Docker host override custom configuration.
            </summary>
            <returns>The Docker host override custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerSocketOverride">
            <summary>
            Gets the Docker socket override custom configuration.
            </summary>
            <returns>The Docker socket override custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerAuthConfig">
            <summary>
            Gets the Docker registry authentication custom configuration.
            </summary>
            <returns>The Docker authentication custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerCertPath">
            <summary>
            Gets the Docker certificates path custom configuration.
            </summary>
            <returns>The Docker certificates path custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerTls">
            <summary>
            Gets the Docker TLS custom configuration.
            </summary>
            <returns>The Docker TLS custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetDockerTlsVerify">
            <summary>
            Gets the Docker TLS verify custom configuration.
            </summary>
            <returns>The Docker TLS verify custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetRyukDisabled">
            <summary>
            Gets the Ryuk disabled custom configuration.
            </summary>
            <returns>The Ryuk disabled custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetRyukContainerPrivileged">
            <summary>
            Gets the Ryuk container privileged custom configuration.
            </summary>
            <returns>The Ryuk container privileged custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetRyukContainerImage">
            <summary>
            Gets the Ryuk container image custom configuration.
            </summary>
            <returns>The Ryuk container image custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ICustomConfiguration.GetHubImageNamePrefix">
            <summary>
            Gets the Docker Hub image name prefix custom configuration.
            </summary>
            <returns>The Docker Hub image name prefix custom configuration.</returns>
            <remarks>https://dotnet.testcontainers.org/custom_configuration/.</remarks>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration">
            <summary>
            An image configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.DeleteIfExists">
            <summary>
            Gets a value indicating whether Testcontainers removes an existing image or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.Dockerfile">
            <summary>
            Gets the Dockerfile.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.DockerfileDirectory">
            <summary>
            Gets the Dockerfile directory.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.ImageBuildPolicy">
            <summary>
            Gets the image build policy.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.BuildArguments">
            <summary>
            Gets a list of build arguments.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.#ctor(System.String,System.String,DotNet.Testcontainers.Images.IImage,System.Func{Docker.DotNet.Models.ImagesListResponse,System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration" /> class.
            </summary>
            <param name="dockerfile">The Dockerfile.</param>
            <param name="dockerfileDirectory">The Dockerfile directory.</param>
            <param name="image">The image.</param>
            <param name="imageBuildPolicy">The image build policy.</param>
            <param name="buildArguments">A list of build arguments.</param>
            <param name="deleteIfExists">A value indicating whether Testcontainers removes an existing image or not.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.ImageBuildParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.#ctor(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.#ctor(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration,DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.DeleteIfExists">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.Dockerfile">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.DockerfileDirectory">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.Image">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.ImageBuildPolicy">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ImageFromDockerfileConfiguration.BuildArguments">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IOperatingSystem">
            <summary>
            Provides host specific operation system information to start Docker container.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOperatingSystem.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IOperatingSystem.NormalizePath(System.String)">
            <summary>
            Modifies a string-path that it matches the operating system directory separator.
            </summary>
            <param name="path">Path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.INetworkConfiguration">
            <summary>
            A network configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.INetworkConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.INetworkConfiguration.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.INetworkConfiguration.Options">
            <summary>
            Gets a dictionary of network options.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.NetworkConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.INetworkConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.NetworkConfiguration.#ctor(System.String,DotNet.Testcontainers.Configurations.NetworkDriver,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.NetworkConfiguration" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="driver">The driver.</param>
            <param name="options">A dictionary of network options.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.NetworkConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.NetworksCreateParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.NetworkConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.NetworkConfiguration.#ctor(DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.NetworkConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.NetworkConfiguration.#ctor(DotNet.Testcontainers.Configurations.INetworkConfiguration,DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.NetworkConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.NetworkConfiguration.Name">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.NetworkConfiguration.Driver">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.NetworkConfiguration.Options">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.NetworkDriver">
            <summary>
            Docker network driver.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.NetworkDriver.Bridge">
            <summary>
            Gets network driver bridge.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.NetworkDriver.Host">
            <summary>
            Gets network driver host.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.NetworkDriver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.NetworkDriver" /> struct.
            </summary>
            <param name="value">The network driver.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.NetworkDriver.Value">
            <summary>
            Gets the string representation of the Docker network driver.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IOutputConsumer">
            <summary>
            Receives the output of the Testcontainer.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOutputConsumer.Enabled">
            <summary>
            Gets a value indicating whether the <see cref="T:DotNet.Testcontainers.Configurations.IOutputConsumer" /> is enabled or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOutputConsumer.Stdout">
            <summary>
            Gets the stream that receives stdout.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOutputConsumer.Stderr">
            <summary>
            Gets the stream that receives stderr.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IOutputConsumer" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull" /> class.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.IOutputConsumer" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull.Enabled">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull.Stdout">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull.Stderr">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToNull.Dispose">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IOutputConsumer" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream" /> class.
            </summary>
            <param name="stdout">The stdout stream.</param>
            <param name="stderr">The stderr stream.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream.Enabled">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream.Stdout">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream.Stderr">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.RedirectStdoutAndStderrToStream.Dispose">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration">
            <summary>
            Reads and maps the custom configurations from the Testcontainers properties file.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration" /> class.
            </summary>
            <param name="propertiesFilePath">The Java properties file path.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration" /> class.
            </summary>
            <param name="lines">A list of Java properties file lines.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.ICustomConfiguration" /> instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerHost">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerHostOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerSocketOverride">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerCertPath">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerTls">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetDockerTlsVerify">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetRyukDisabled">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetRyukContainerPrivileged">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetRyukContainerImage">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.PropertiesFileConfiguration.GetHubImageNamePrefix">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.TestcontainersSettings">
            <summary>
            This class represents the Testcontainers settings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.DockerHostOverride">
            <summary>
            Gets or sets the Docker host override value.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.DockerSocketOverride">
            <summary>
            Gets or sets the Docker socket override value.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> is enabled or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperPrivilegedModeEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> privileged mode is enabled or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperImage">
            <summary>
            Gets or sets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperPublicHostPort">
            <summary>
            Gets or sets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> public host port.
            </summary>
            <remarks>
            The <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> might not be able to connect to Ryuk on Docker Desktop for Windows.
            Assigning a random port might run into the excluded port range. The container starts, but we cannot establish a TCP connection:
            - https://github.com/docker/for-win/issues/3171.
            - https://github.com/docker/for-win/issues/11584.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.HubImageNamePrefix">
            <summary>
            Gets or sets a prefix that applies to every image that is pulled from Docker Hub.
            </summary>
            <remarks>
            Please verify that all required images exist in your registry.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.OS">
            <summary>
            Gets or sets the host operating system.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.SettingsInitialized">
            <summary>
            Gets the wait handle that signals settings initialized.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TestcontainersSettings.ExposeHostPortsAsync(System.UInt16,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DotNet.Testcontainers.Containers.PortForwardingContainer.ExposeHostPortsAsync(System.Collections.Generic.IEnumerable{System.UInt16},System.Threading.CancellationToken)" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TestcontainersSettings.ExposeHostPortsAsync(System.Collections.Generic.IEnumerable{System.UInt16},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DotNet.Testcontainers.Containers.PortForwardingContainer.ExposeHostPortsAsync(System.Collections.Generic.IEnumerable{System.UInt16},System.Threading.CancellationToken)" />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.Unix">
            <summary>
            Unix operating system.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode644">
            <summary>
            Represents the Unix file mode 644, which grants read and write permissions to the user and read permissions to the group and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode666">
            <summary>
            Represents the Unix file mode 666, which grants read and write permissions to the user, group, and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode700">
            <summary>
            Represents the Unix file mode 700, which grants read, write, and execute permissions to the user, and no permissions to the group and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode755">
            <summary>
            Represents the Unix file mode 755, which grants read, write, and execute permissions to the user, and read and execute permissions to the group and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode777">
            <summary>
            Represents the Unix file mode 777, which grants read, write, and execute permissions to the user, group, and others.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Unix.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.IOperatingSystem" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Unix.DockerEndpointAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.NormalizePath(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.UnixFileModes">
            <summary>
            Unix file mode.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.OtherExecute">
            <summary>
            Execute permission for others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.OtherWrite">
            <summary>
            Write permission for others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.OtherRead">
            <summary>
            Read permission for others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.GroupExecute">
            <summary>
            Execute permission for group.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.GroupWrite">
            <summary>
            Write permission for group.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.GroupRead">
            <summary>
            Read permission for group.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.UserExecute">
            <summary>
            Execute permission for owner.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.UserWrite">
            <summary>
            Write permission for owner.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.UserRead">
            <summary>
            Read permission for owner.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.StickyBit">
            <summary>
            Sticky bit permission.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.SetGroup">
            <summary>
            Set Group permission.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.SetUser">
            <summary>
            Set User permission.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.AccessMode">
            <summary>
            Docker mount access mode.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.AccessMode.ReadOnly">
            <summary>
            Gets access modes ReadOnly.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.AccessMode.ReadWrite">
            <summary>
            Gets access modes ReadWrite.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.AccessMode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.AccessMode" /> struct.
            </summary>
            <param name="value">The volume access mode.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.AccessMode.Value">
            <summary>
            Gets the string representation of the Docker volume access mode.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.BinaryResourceMapping">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IResourceMapping" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.BinaryResourceMapping.#ctor(System.Byte[],System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.BinaryResourceMapping" /> class.
            </summary>
            <param name="resourceContent">The byte array content to map in the container.</param>
            <param name="containerPath">The absolute path of a file to map in the container.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.BinaryResourceMapping.GetAllBytesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.BindMount">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IMount" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.BindMount.#ctor(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.BindMount" /> struct.
            </summary>
            <param name="hostPath">The absolute path of a file or directory to mount on the host system.</param>
            <param name="containerPath">The absolute path of a file or directory to mount in the container.</param>
            <param name="accessMode">The Docker volume access mode.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.BindMount.Source">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.BindMount.Target">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.BindMount.AccessMode">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.BindMount.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.BindMount.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.FileResourceMapping">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IResourceMapping" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.FileResourceMapping.#ctor(System.String,System.String,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.FileResourceMapping" /> class.
            </summary>
            <param name="hostPath">The absolute path of a file to map on the host system.</param>
            <param name="containerPath">The absolute path of a file to map in the container.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.FileResourceMapping.Type">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.FileResourceMapping.AccessMode">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.FileResourceMapping.Source">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.FileResourceMapping.Target">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.FileResourceMapping.FileMode">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.FileResourceMapping.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.FileResourceMapping.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.FileResourceMapping.GetAllBytesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IMount">
            <summary>
            This class represents a filesystem mount.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.Type">
            <summary>
            Gets the Docker mount type.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.AccessMode">
            <summary>
            Gets the Docker mount access mode.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.Source">
            <summary>
            Gets the absolute path of a file, a directory or volume to mount on the host system.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.Target">
            <summary>
            Gets the absolute path of a file or directory to mount in the container.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IResourceMapping">
            <summary>
            This class represents a read-only filesystem resource mapping.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceMapping.FileMode">
            <summary>
            Gets the Unix file mode.
            </summary>
            <remarks>
            The <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class provides access to common constant POSIX file mode permissions.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IResourceMapping.GetAllBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the byte array content of the resource mapping.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the byte array content of the resource mapping has been read.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IVolumeConfiguration">
            <summary>
            A volume configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IVolumeConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.MountType">
            <summary>
            Docker mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.Bind">
            <summary>
            The 'bind' mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.Volume">
            <summary>
            The 'volume' mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.Tmpfs">
            <summary>
            The 'tmpfs' mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.NamedPipe">
            <summary>
            The 'npipe' mount type.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.MountType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.MountType" /> struct.
            </summary>
            <param name="type">The mount type.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.MountType.Type">
            <summary>
            Gets the mount type.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.TmpfsMount">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IMount" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TmpfsMount.#ctor(System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.TmpfsMount" /> struct.
            </summary>
            <param name="containerPath">The absolute path to mount the tmpfs in the container.</param>
            <param name="accessMode">The Docker volume access mode.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TmpfsMount.Type">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TmpfsMount.AccessMode">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TmpfsMount.Source">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TmpfsMount.Target">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TmpfsMount.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TmpfsMount.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.VolumeConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IVolumeConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.VolumeConfiguration" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.VolumesCreateParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.VolumeConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeConfiguration.#ctor(DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.VolumeConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeConfiguration.#ctor(DotNet.Testcontainers.Configurations.IVolumeConfiguration,DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.VolumeConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.VolumeConfiguration.Name">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.VolumeMount">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IMount" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeMount.#ctor(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.VolumeMount" /> struct.
            </summary>
            <param name="volume">The volume to mount on the host system.</param>
            <param name="containerPath">The absolute path of a file or directory to mount in the container.</param>
            <param name="accessMode">The Docker volume access mode.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.VolumeMount.Type">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.VolumeMount.AccessMode">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.VolumeMount.Source">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.VolumeMount.Target">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeMount.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.VolumeMount.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy">
            <summary>
            Wait for an HTTP(S) endpoint to return a particular status code.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.UntilAsync(DotNet.Testcontainers.Containers.IContainer)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Waits for the status code.
            </summary>
            <param name="statusCode">The expected status code.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForStatusCodeMatching(System.Predicate{System.Net.HttpStatusCode})">
            <summary>
            Waits for the status code to pass the predicate.
            </summary>
            <param name="statusCodePredicate">The predicate to test the HTTP response against.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForResponseMessageMatching(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Waits for the response message to pass the predicate.
            </summary>
            <param name="responseMessagePredicate">The predicate to test the HTTP response against.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForPath(System.String)">
            <summary>
            Waits for the path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForPort(System.UInt16)">
            <summary>
            Waits for the port.
            </summary>
            <remarks>
            <see cref="F:DotNet.Testcontainers.Configurations.HttpWaitStrategy.HttpPort" /> default value.
            </remarks>
            <param name="port">The port to check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.UsingTls(System.Boolean)">
            <summary>
            Indicates that the HTTP request use HTTPS.
            </summary>
            <remarks>
            <see cref="F:System.Boolean.FalseString" /> default value.
            </remarks>
            <param name="tlsEnabled">True if the HTTP request use HTTPS, otherwise false.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.UsingHttpMessageHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Defines a custom <see cref="T:System.Net.Http.HttpMessageHandler" /> which should be used by the internal <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
            <param name="handler">The handler to pass to the <see cref="T:System.Net.Http.HttpClient" /> when it is created.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Indicates the HTTP request method.
            </summary>
            <remarks>
            <see cref="P:System.Net.Http.HttpMethod.Get" /> default value.
            </remarks>
            <param name="method">The HTTP method.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithBasicAuthentication(System.String,System.String)">
            <summary>
            Adds a basic authentication HTTP header to the HTTP request.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithHeader(System.String,System.String)">
            <summary>
            Adds a custom HTTP header to the HTTP request.
            </summary>
            <param name="name">The HTTP header name.</param>
            <param name="value">The HTTP header value.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithHeaders(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds custom HTTP headers to the HTTP request.
            </summary>
            <param name="headers">A list of HTTP headers.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithContent(System.Func{System.Net.Http.HttpContent})">
            <summary>
            Sets the HTTP message body of the HTTP request.
            </summary>
            <param name="httpContentCallback">The callback to invoke to create the HTTP message body.</param>
            <remarks>
            It is important to create a new instance of <see cref="T:System.Net.Http.HttpContent" /> within the callback, the HTTP client disposes the content after each call.
            </remarks>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS">
            <summary>
            Collection of pre-configured strategies to wait until the container is up and running.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.AddCustomWaitStrategy(DotNet.Testcontainers.Configurations.IWaitUntil)">
            <summary>
            Adds a custom wait strategy to the wait strategies collection.
            </summary>
            <param name="waitStrategy">The wait strategy until the container is ready.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>Already contains <see cref="T:DotNet.Testcontainers.Configurations.UntilContainerIsRunning" /> as default wait strategy.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilCommandIsCompleted(System.String)">
            <summary>
            Waits until the command is completed successfully.
            </summary>
            <param name="command">The command to be executed.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>Invokes the operating system command shell. Expects the exit code to be 0.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilCommandIsCompleted(System.String[])">
            <summary>
            Waits until the command is completed successfully.
            </summary>
            <param name="command">The command to be executed.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>
            Does not invoke the operating system command shell.
            Normal shell processing does not happen. Expects the exit code to be 0.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilPortIsAvailable(System.Int32)">
            <summary>
            Waits until the port is available.
            </summary>
            <param name="port">The port to be checked.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilFileExists(System.String)">
            <summary>
            Waits until the file exists.
            </summary>
            <param name="file">The file to be checked.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilMessageIsLogged(System.String)">
            <summary>
            Waits until the message is logged.
            </summary>
            <param name="pattern">The regular expression that matches the log message.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilMessageIsLogged(System.Text.RegularExpressions.Regex)">
            <summary>
            Waits until the message is logged.
            </summary>
            <param name="pattern">The regular expression that matches the log message.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilOperationIsSucceeded(System.Func{System.Boolean},System.Int32)">
            <summary>
            Waits until the operation is completed successfully.
            </summary>
            <param name="operation">The operation to be executed.</param>
            <param name="maxCallCount">The number of attempts before an exception is thrown.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <exception cref="T:System.TimeoutException">Thrown when number of failed operations exceeded <paramref name="maxCallCount" />.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilHttpRequestIsSucceeded(System.Func{DotNet.Testcontainers.Configurations.HttpWaitStrategy,DotNet.Testcontainers.Configurations.HttpWaitStrategy})">
            <summary>
            Waits until the http request is completed successfully.
            </summary>
            <param name="request">The http request to be executed.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilContainerIsHealthy(System.Int64)">
            <summary>
            Waits until the container is healthy.
            </summary>
            <param name="failingStreak">The number of attempts before an exception is thrown.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <exception cref="T:System.TimeoutException">Thrown when number of failed operations exceeded <paramref name="failingStreak" />.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.Build">
            <summary>
            Returns a collection with all configured wait strategies.
            </summary>
            <returns>Returns a list with all configured wait strategies.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.WaitForContainerOS">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.WaitForContainerOS" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilCommandIsCompleted(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilCommandIsCompleted(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilPortIsAvailable(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.AddCustomWaitStrategy(DotNet.Testcontainers.Configurations.IWaitUntil)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilFileExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilMessageIsLogged(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilMessageIsLogged(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilOperationIsSucceeded(System.Func{System.Boolean},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilHttpRequestIsSucceeded(System.Func{DotNet.Testcontainers.Configurations.HttpWaitStrategy,DotNet.Testcontainers.Configurations.HttpWaitStrategy})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.UntilContainerIsHealthy(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerOS.Build">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.WaitForContainerUnix">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerUnix.UntilCommandIsCompleted(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerUnix.UntilCommandIsCompleted(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerUnix.UntilPortIsAvailable(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.WaitForContainerWindows">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerWindows.UntilCommandIsCompleted(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerWindows.UntilCommandIsCompleted(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitForContainerWindows.UntilPortIsAvailable(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WaitWhileAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks while condition is true or timeout occurs.
            </summary>
            <param name="wait">Function to block execution.</param>
            <param name="frequency">The frequency in milliseconds to check the condition.</param>
            <param name="timeout">Timeout in milliseconds.</param>
            <param name="ct">Propagates notification that operations should be canceled.</param>
            <exception cref="T:System.TimeoutException">Thrown as soon as the timeout expires.</exception>
            <returns>A task that represents the asynchronous block operation.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WaitUntilAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks until condition is true or timeout occurs.
            </summary>
            <param name="wait">Function to block execution.</param>
            <param name="frequency">The frequency in milliseconds to check the condition.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="ct">Propagates notification that operations should be canceled.</param>
            <exception cref="T:System.TimeoutException">Thrown as soon as the timeout expires.</exception>
            <returns>A task that represents the asynchronous block operation.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.Windows">
            <summary>
            Windows operating system.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Windows.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.IOperatingSystem" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Windows.DockerEndpointAuthConfig">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.NormalizePath(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Containers.DockerContainer">
            <inheritdoc cref="T:DotNet.Testcontainers.Containers.IContainer" />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.DockerContainer" /> class.
            </summary>
            <param name="configuration">The container configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Creating">
            <inheritdoc />
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Starting">
            <inheritdoc />
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Stopping">
            <inheritdoc />
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Created">
            <inheritdoc />
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Started">
            <inheritdoc />
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Stopped">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Logger">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Id">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Name">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.IpAddress">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.MacAddress">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Hostname">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Image">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.State">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Health">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.HealthCheckFailingStreak">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetMappedPublicPort(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetMappedPublicPort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetExitCodeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetLogsAsync(System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.Byte[],System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.String,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.IO.FileInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.IO.DirectoryInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.ReadFileAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.ExecAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.DisposeAsyncCore">
            <inheritdoc cref="M:System.IAsyncDisposable.DisposeAsync" />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeStartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the container.
            </summary>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeStopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the container.
            </summary>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been stopped.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.Exists">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ExecResult">
            <summary>
            A command exec result.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ExecResult.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.ExecResult" /> struct.
            </summary>
            <param name="stdout">The stdout output.</param>
            <param name="stderr">The stderr output.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecResult.Stdout">
            <summary>
            Gets the stdout output.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecResult.Stderr">
            <summary>
            Gets the stderr output.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecResult.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.IContainer">
            <summary>
            A container instance.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Creating">
            <summary>
            Subscribes to the creating event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Starting">
            <summary>
            Subscribes to the starting event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Stopping">
            <summary>
            Subscribes to the stopping event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Created">
            <summary>
            Subscribes to the created event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Started">
            <summary>
            Subscribes to the started event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Stopped">
            <summary>
            Subscribes to the stopped event.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Id">
            <summary>
            Gets the container id.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Name">
            <summary>
            Gets the container name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.IpAddress">
            <summary>
            Gets the container IP address.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.MacAddress">
            <summary>
            Gets the container MAC address.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Hostname">
            <summary>
            Gets the container hostname.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Image">
            <summary>
            Gets the container image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.State">
            <summary>
            Gets the container state.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Health">
            <summary>
            Gets the container health status.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.HealthCheckFailingStreak">
            <summary>
            Gets the container health check failing streak.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.Int32)">
            <summary>
            Resolves the public assigned host port.
            </summary>
            <param name="containerPort">The container port.</param>
            <returns>Returns the public assigned host port.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.String)">
            <summary>
            Resolves the public assigned host port.
            </summary>
            <param name="containerPort">The container port.</param>
            <returns>Returns the public assigned host port.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetExitCodeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the container exit code.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Returns the container exit code.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetLogsAsync(System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the container logs.
            </summary>
            <param name="since">Only logs since this time.</param>
            <param name="until">Only logs until this time.</param>
            <param name="timestampsEnabled">Determines whether every log line contains a timestamp or not.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Returns the container logs.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been started.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
            <exception cref="T:System.TimeoutException">Thrown when the wait strategy task gets canceled or the timeout expires.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been stopped.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.Byte[],System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="fileContent">The byte array content of the file.</param>
            <param name="filePath">The target file path to copy the file to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.String,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory or file to the container.
            </summary>
            <param name="source">The source directory or file to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory or file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.IO.DirectoryInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory to the container.
            </summary>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.IO.FileInfo,System.String,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.ReadFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a file from the container.
            </summary>
            <param name="filePath">An absolute path or a name value within the container.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the file has been read.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.ExecAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes a command in the container.
            </summary>
            <param name="command">Shell command.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the shell command has been executed.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.PortForwardingContainer">
            <inheritdoc cref="T:DotNet.Testcontainers.Containers.DockerContainer" />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.#ctor(DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer" /> class.
            </summary>
            <param name="configuration">The container configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.PortForwardingContainer.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer" /> instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.ExposeHostPortsAsync(System.Collections.Generic.IEnumerable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Exposes the host ports using SSH port forwarding.
            </summary>
            <param name="ports">The host ports to forward.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the host ports are forwarded.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder">
            <inheritdoc cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3" />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.#ctor(DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.DockerResourceConfiguration">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.Init">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.Clone(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.Merge(DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration,DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.WithUsername(System.String)">
            <summary>
            Sets the OpenSSH daemon username.
            </summary>
            <param name="username">The OpenSSH daemon username.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder.WithPassword(System.String)">
            <summary>
            Sets the OpenSSH daemon password.
            </summary>
            <param name="password">The OpenSSH daemon password.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingBuilder" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration">
            <inheritdoc cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration" /> class.
            </summary>
            <param name="username">The OpenSSH daemon username.</param>
            <param name="password">The OpenSSH daemon password.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.#ctor(DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.#ctor(DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration,DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.Username">
            <summary>
            Gets the OpenSSH daemon username.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.PortForwardingContainer.PortForwardingConfiguration.Password">
            <summary>
            Gets the OpenSSH daemon password.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ResourceReaper">
            <summary>
            The Resource Reaper takes care of the remaining Docker resources and removes them: https://dotnet.testcontainers.org/api/resource-reaper/.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaper.ConnectionTimeoutInSeconds">
            <summary>
            60 seconds connection timeout.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaper.RetryTimeoutInSeconds">
            <summary>
            2 seconds retry timeout.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.ResourceReaper.StateChanged">
            <summary>
            Occurs when a Resource Reaper state has changed.
            </summary>
            <remarks>
            It emits state changes to uninitialized instances too.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaper.DefaultSessionId">
            <summary>
            Gets the default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> session id.
            </summary>
            <remarks>
            The default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> will start either on <see cref="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartDefaultAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,System.Boolean,System.Threading.CancellationToken)" />
            or if a <see cref="T:DotNet.Testcontainers.Containers.IContainer" /> is configured with <see cref="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithCleanUp(System.Boolean)" />.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaper.SessionId">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> session id.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartDefaultAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts and returns the default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <param name="isWindowsEngineEnabled">Determines whether the Windows engine is enabled or not.</param>
            <param name="ct">The cancellation token to cancel the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initialization.</param>
            <returns>Task that completes when the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartNewAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,DotNet.Testcontainers.Images.IImage,DotNet.Testcontainers.Configurations.IMount,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts and returns a new <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <param name="resourceReaperImage">The Resource Reaper image.</param>
            <param name="dockerSocket">The Docker socket.</param>
            <param name="requiresPrivilegedMode">True if the container requires privileged mode, otherwise false.</param>
            <param name="initTimeout">The timeout to initialize the Ryuk connection (Default: <inheritdoc cref="F:DotNet.Testcontainers.Containers.ResourceReaper.ConnectionTimeoutInSeconds" />).</param>
            <param name="ct">The cancellation token to cancel the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initialization.</param>
            <returns>Task that completes when the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartNewAsync(System.Guid,DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,DotNet.Testcontainers.Images.IImage,DotNet.Testcontainers.Configurations.IMount,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts and returns a new <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <param name="resourceReaperImage">The Resource Reaper image.</param>
            <param name="dockerSocket">The Docker socket.</param>
            <param name="requiresPrivilegedMode">True if the container requires privileged mode, otherwise false.</param>
            <param name="initTimeout">The timeout to initialize the Ryuk connection (Default: <inheritdoc cref="F:DotNet.Testcontainers.Containers.ResourceReaper.ConnectionTimeoutInSeconds" />).</param>
            <param name="ct">The cancellation token to cancel the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initialization.</param>
            <returns>Task that completes when the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.MaintainRyukConnection(System.Threading.Tasks.TaskCompletionSource{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Establishes and maintains the connection to the running Ryuk container.
            
             This is split into two phases:
            
             1) Initialization
             Tries to establish a connection to Ryuk. After establishment, sends a Docker resource filter to Ryuk. Ryuk will acknowledge the reception of the filter.
             On termination, Ryuk will delete all Docker resources matching the filter. You can cancel the initialization with <paramref name="ct" />.
            
             2) Maintenance
             After initialization, we need to keep the connection to Ryuk open. If we lose the connection for any reason, Ryuk allows reconnecting within 10 seconds.
             It's not necessary to send the filter again after reconnecting.
             </summary>
             <param name="ryukInitializedTaskSource">The task that completes after the initialization.</param>
             <param name="ct">The cancellation token to cancel the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initialization. This will not cancel the maintained connection.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ResourceReaperState">
            <summary>
            Resource Reaper states.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.Created">
            <summary>
            <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> is created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.InitializingConnection">
            <summary>
            <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initializes the TCP connection to Ryuk.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.MaintainingConnection">
            <summary>
            <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> maintains the TCP connection to Ryuk.
            </summary>
            <remarks>
            <see cref="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartNewAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,DotNet.Testcontainers.Images.IImage,DotNet.Testcontainers.Configurations.IMount,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" /> will complete now.
            </remarks>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.ConnectionTerminated">
            <summary>
            The connection to Ryuk has been terminated and Ryuk is going to clean up all associated Docker resources.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs">
            <summary>
            Provides data for the <see cref="E:DotNet.Testcontainers.Containers.ResourceReaper.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs.#ctor(DotNet.Testcontainers.Containers.ResourceReaper,DotNet.Testcontainers.Containers.ResourceReaperState)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs" /> class.
            </summary>
            <param name="resourceReaper">The Resource Reaper instance.</param>
            <param name="resourceReaperState">The Resource Reaper state.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs.State">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> state.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.TarOutputMemoryStream">
            <summary>
            Represent a tar archive file.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.TarOutputMemoryStream" /> class.
            </summary>
            <param name="targetDirectoryPath">The target directory path to extract the files to.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.TarOutputMemoryStream" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(DotNet.Testcontainers.Configurations.IResourceMapping,System.Threading.CancellationToken)">
            <summary>
            Adds the content of an implementation of <see cref="T:DotNet.Testcontainers.Configurations.IResourceMapping" /> to the archive.
            </summary>
            <param name="resourceMapping">The resource mapping to add to the archive.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(System.IO.FileInfo,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Adds a file to the archive.
            </summary>
            <param name="file">The file to add to the archive.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been added to the archive.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(System.IO.DirectoryInfo,System.Boolean,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Adds a directory to the archive.
            </summary>
            <param name="directory">The directory to add to the archive.</param>
            <param name="recurse">A value indicating whether the current directory and all its subdirectories are included or not.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(System.IO.DirectoryInfo,System.IO.FileInfo,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Adds a file to the archive.
            </summary>
            <param name="directory">The root directory of the file to add to the archive.</param>
            <param name="file">The file to add to the archive.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.TestcontainersHealthStatus">
            <summary>
            Docker container health status.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Undefined">
            <summary>
            Docker container has not been created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.None">
            <summary>
            Docker container has no health check assigned.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Starting">
            <summary>
            Docker container is starting.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Healthy">
            <summary>
            Docker container is healthy.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Unhealthy">
            <summary>
            Docker container is unhealthy.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.TestcontainersStates">
            <summary>
            Docker container states.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Undefined">
            <summary>
            Docker container has not been created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Created">
            <summary>
            Docker container is created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Restarting">
            <summary>
            Docker container is restarting.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Running">
            <summary>
            Docker container is running.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Paused">
            <summary>
            Docker container is paused.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Exited">
            <summary>
            Docker container is exited.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Dead">
            <summary>
            Docker container is dead.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Guard">
            <summary>
            A guard to determine if one or more conditions are not met.
            </summary>
            <summary>
            A guard collection of nullability preconditions.
            </summary>
            <summary>
            A guard collection of string preconditions.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.Argument``1(``0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>A new instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Guard.ArgumentInfo`1">
            <summary>
            An argument.
            </summary>
            <typeparam name="TType">The type.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.ArgumentInfo`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Guard.ArgumentInfo`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Guard.ArgumentInfo`1.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.ArgumentInfo`1.HasValue">
            <summary>
            Checks whether the argument has a value or not.
            </summary>
            <returns>True if the argument has a value; otherwise, false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.Null``1(DotNet.Testcontainers.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>
            Ensures the argument value is null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.NotNull``1(DotNet.Testcontainers.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>
            Ensures the argument value is not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.ThrowIf``1(DotNet.Testcontainers.Guard.ArgumentInfo{``0}@,System.Func{DotNet.Testcontainers.Guard.ArgumentInfo{``0},System.Boolean},System.Func{DotNet.Testcontainers.Guard.ArgumentInfo{``0},System.Exception})">
            <summary>
            Ensures the argument value not pass the predicate.
            </summary>
            <param name="argument">The argument.</param>
            <param name="condition">The condition that raises the exception.</param>
            <param name="ifClause">The function to invoke to create the exception object.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.Empty(DotNet.Testcontainers.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
            Ensures the argument value is empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.NotEmpty(DotNet.Testcontainers.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
            Ensures the argument value is not empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.NotUppercase(DotNet.Testcontainers.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
            Ensures the argument value does not contain uppercase characters.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.IFutureResource">
            <summary>
            A future resource instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.IFutureResource.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been created.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.IFutureResource.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been deleted.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.DockerfileArchive">
            <summary>
            Generates a tar archive with Docker configuration files. The tar archive can be used to build a Docker image.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerfileArchive.#ctor(System.String,System.String,DotNet.Testcontainers.Images.IImage,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerfileArchive" /> class.
            </summary>
            <param name="dockerfileDirectory">Directory to Docker configuration files.</param>
            <param name="dockerfile">Name of the Dockerfile, which is necessary to start the Docker build.</param>
            <param name="image">Docker image information to create the tar archive for.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentException">Thrown when the Dockerfile directory does not exist or the directory does not contain a Dockerfile.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerfileArchive.#ctor(System.IO.DirectoryInfo,System.IO.FileInfo,DotNet.Testcontainers.Images.IImage,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerfileArchive" /> class.
            </summary>
            <param name="dockerfileDirectory">Directory to Docker configuration files.</param>
            <param name="dockerfile">Name of the Dockerfile, which is necessary to start the Docker build.</param>
            <param name="image">Docker image information to create the tar archive for.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentException">Thrown when the Dockerfile directory does not exist or the directory does not contain a Dockerfile.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerfileArchive.GetBaseImages">
            <summary>
            Gets a collection of base images.
            </summary>
            <remarks>
            This method reads the Dockerfile and collects a list of base images. It
            excludes stages that do not correspond to base images. For example, it will not include
            the second line from the following Dockerfile configuration:
            <code>
              FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
              FROM build
            </code>
            </remarks>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:DotNet.Testcontainers.Images.IImage" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerfileArchive.Tar(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerfileArchive.GetFiles(System.String)">
            <summary>
            Gets all accepted Docker archive files.
            </summary>
            <param name="directory">Directory to Docker configuration files.</param>
            <returns>Returns a list with all accepted Docker archive files.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.DockerIgnoreFile">
            <summary>
            An implementation of <see cref="T:DotNet.Testcontainers.Images.IgnoreFile" /> that uses the patterns of the .dockerignore file to ignore directories and files.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerIgnoreFile.#ctor(System.String,System.String,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerIgnoreFile" /> class.
            </summary>
            <param name="dockerignoreFileDirectory">Directory that contains all docker configuration files.</param>
            <param name="dockerignoreFile">.dockerignore file name.</param>
            <param name="dockerfileFile">Dockerfile file name.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerIgnoreFile.#ctor(System.IO.FileSystemInfo,System.String,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerIgnoreFile" /> class.
            </summary>
            <param name="dockerignoreFileDirectory">Directory that contains all docker configuration files.</param>
            <param name="dockerignoreFile">.dockerignore file name.</param>
            <param name="dockerfileFile">Dockerfile file name.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Images.DockerImage">
            <inheritdoc cref="T:DotNet.Testcontainers.Images.IImage" />
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.#ctor(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerImage" /> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerImage" /> class.
            </summary>
            <param name="image">The image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any argument is null.</exception>
            <example>"fedora/httpd:version1.0" where "fedora" is the repository, "httpd" the name and "version1.0" the tag.</example>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerImage" /> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="name">The name.</param>
            <param name="tag">The tag.</param>
            <param name="hubImageNamePrefix">The Docker Hub image name prefix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any argument is null.</exception>
            <example>"fedora/httpd:version1.0" where "fedora" is the repository, "httpd" the name and "version1.0" the tag.</example>
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Repository">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Name">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Tag">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.FullName">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.GetHostname">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Images.FutureDockerImage">
            <inheritdoc cref="T:DotNet.Testcontainers.Images.IFutureDockerImage" />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.#ctor(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.FutureDockerImage" /> class.
            </summary>
            <param name="configuration">The image configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Images.FutureDockerImage.Repository">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Images.FutureDockerImage.Name">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Images.FutureDockerImage.Tag">
            <inheritdoc />
        </member>
        <member name="P:DotNet.Testcontainers.Images.FutureDockerImage.FullName">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.GetHostname">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.Exists">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Images.FutureDockerImage.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Images.IFutureDockerImage">
            <summary>
            A future image instance.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile">
            <summary>
            Creates a Regex cache for all ignore patterns.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.IgnoreFile" /> class.
            <see cref="M:DotNet.Testcontainers.Images.IgnoreFile.Accepts(System.String)" /> and <see cref="M:DotNet.Testcontainers.Images.IgnoreFile.Denies(System.String)" /> files.
            </summary>
            <param name="patterns">A list of strings with ignore patterns.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile.ISearchAndReplace`1">
            <summary>
            Replaces all occurrences of a defined pattern.
            </summary>
            <typeparam name="TToReplace">Type of element that is searched and replaced.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.ISearchAndReplace`1.Replace(`0)">
            <summary>
            Replaces all occurrences of a defined pattern.
            </summary>
            <param name="input">Is searched and replaced.</param>
            <returns>Returns the input with all replaced occurrences of a defined pattern.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.Accepts(System.String)">
            <summary>
            Returns true if the file path does not match any ignore pattern.
            </summary>
            <param name="file">Path to check.</param>
            <returns>True if the file path does not match any ignore pattern, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.Denies(System.String)">
            <summary>
            Returns true if the file path matches any ignore pattern.
            </summary>
            <param name="file">Path to check.</param>
            <returns>True if the file path matches any ignore pattern, otherwise false.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile.EscapeRegex">
            <summary>
            Escapes a set of of metacharacters (-, [, ], /, {, }, (, ), +, ?, ., \, ^, $, |) with their \ codes.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.EscapeRegex.Replace(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile.PrepareRecursiveWildcards">
            <summary>
            Searches and replaces a string with recursive wildcards **.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.PrepareRecursiveWildcards.Replace(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile.PrepareNonRecursiveWildcards">
            <summary>
            Searches and replaces a string with non recursive wildcards *.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.PrepareNonRecursiveWildcards.Replace(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile.PrepareZeroOrOneQuantifier">
            <summary>
            Searches and replaces a string with zero-or-one quantifier ?.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.PrepareZeroOrOneQuantifier.Replace(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Images.IImage">
            <summary>
            An image instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Repository">
            <summary>
            Gets the repository.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.FullName">
            <summary>
            Gets the full image name.
            </summary>
            <remarks>
            The full image name, like "foo/bar:1.0.0" or "bar:latest" based on the components values.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IImage.GetHostname">
            <summary>
            Gets the registry hostname.
            </summary>
            <returns>The registry hostname.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.ITarArchive">
            <summary>
            Collects files into one tar archive file.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.ITarArchive.Tar(System.Threading.CancellationToken)">
            <summary>
            Creates a tar archive file.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the tar archive file has been created.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.PullPolicy">
            <summary>
            Pre-configured image pull policies.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.PullPolicy.Never">
            <summary>
            Gets the policy that never pulls images.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.PullPolicy.Missing">
            <summary>
            Gets the policy that pulls missing images (not cached).
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.PullPolicy.Always">
            <summary>
            Gets the policy that always pulls images.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.ConsoleLogger">
             <summary>
             An <see cref="T:Microsoft.Extensions.Logging.ILogger" /> implementation that forwards messages to the console. Not every test framework or environment supports this approach. Developers may still need to configure their own logging implementation.
             If VSTest.Console.exe loads the test adapter in a deterministic order, we can write our own test adapter and intercept the IMessageLogger instance: https://github.com/microsoft/vstest/issues/4125#issuecomment-1320880502.
             To debug the test host and runner set the environment variables VSTEST_HOST_DEBUG and VSTEST_RUNNER_DEBUG to 1. To enable VSTest logging set VSTEST_DIAG to 1 and VSTEST_DIAG_VERBOSITY to verbose.
             The following example contains the ITestExecutor implementations. It is important that the assembly ends with TestAdapter.dll.
             </summary>
             <example>
             <code>
               [FileExtension(DllFileExtension)]
               [FileExtension(ExeFileExtension)]
               [DefaultExecutorUri(ExecutorUri)]
               [ExtensionUri(ExecutorUri)]
               [Category(Category)]
               internal sealed class UssDiscovery : ITestDiscoverer, ITestExecutor
               {
                 private const string DllFileExtension = &quot;.dll&quot;;
            
                 private const string ExeFileExtension = &quot;.exe&quot;;
            
                 private const string ExecutorUri = &quot;executor://testcontainers.org/v1&quot;;
            
                 private const string Category = &quot;managed&quot;;
            
                 public void DiscoverTests(IEnumerable&lt;string&gt; sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink)
                 {
                 }
            
                 public void RunTests(IEnumerable&lt;TestCase&gt; tests, IRunContext runContext, IFrameworkHandle frameworkHandle)
                 {
                   SetLogger(frameworkHandle);
                 }
            
                 public void RunTests(IEnumerable&lt;string&gt; sources, IRunContext runContext, IFrameworkHandle frameworkHandle)
                 {
                   SetLogger(frameworkHandle);
                 }
            
                 public void Cancel()
                 {
                 }
            
                 private static void SetLogger(IMessageLogger logger)
                 {
                   // Set the TestcontainersSettings.Logger. Use a semaphore to block the test execution until the logger is set.
                 }
               }
             </code>
             </example>
        </member>
        <member name="P:DotNet.Testcontainers.ConsoleLogger.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.ConsoleLogger" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.ConsoleLogger.DebugLogLevelEnabled">
            <summary>
            Gets a value indicating whether the debug log level is enabled or not.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Networks.DockerNetwork">
            <inheritdoc cref="T:DotNet.Testcontainers.Networks.INetwork" />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.#ctor(DotNet.Testcontainers.Configurations.INetworkConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Networks.DockerNetwork" /> class.
            </summary>
            <param name="configuration">The network configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Networks.DockerNetwork.Name">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.DisposeAsyncCore">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.Exists">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Networks.DockerNetwork.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Networks.INetwork">
            <summary>
            A network instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Networks.INetwork.Name">
            <summary>
            Gets the name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Network has not been created.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Resource">
            <summary>
            A resource instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Resource.Disposed">
            <summary>
            Gets a value indicating whether the resource has been disposed or not.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Resource.Exists">
            <summary>
            Checks whether the resources exists or not.
            </summary>
            <returns>True if the resource exists; otherwise, false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been created.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been deleted.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.DisposeAsyncCore">
            <inheritdoc cref="M:System.IAsyncDisposable.DisposeAsync" />
        </member>
        <member name="M:DotNet.Testcontainers.Resource.AcquireLock">
            <summary>
            Acquires a lock to access the resource thread-safe.
            </summary>
            <returns>An <see cref="T:System.IDisposable" /> that releases the lock on <see cref="M:System.IDisposable.Dispose" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.ThrowIfResourceNotFound">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> when the resources was not found.
            </summary>
            <exception cref="T:System.InvalidOperationException">The resource was not found.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.ThrowIfLockNotAcquired">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> when the lock is not acquired.
            </summary>
            <exception cref="T:System.InvalidOperationException">The lock is not acquired.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Resource.Lock">
            <summary>
            A lock to synchronize threads.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.Lock.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Resource.Lock" /> class.
            </summary>
            <param name="semaphoreSlim">The semaphore slim to synchronize threads.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Volumes.DockerVolume">
            <inheritdoc cref="T:DotNet.Testcontainers.Volumes.IVolume" />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.#ctor(DotNet.Testcontainers.Configurations.IVolumeConfiguration,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Volumes.DockerVolume" /> class.
            </summary>
            <param name="configuration">The volume configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Volumes.DockerVolume.Name">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.DisposeAsyncCore">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.Exists">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.Volumes.DockerVolume.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Volumes.IVolume">
            <summary>
            A volume instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Volumes.IVolume.Name">
            <summary>
            Gets the name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Volume has not been created.</exception>
        </member>
    </members>
</doc>
